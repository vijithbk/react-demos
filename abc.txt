You are a senior fullstack engineer and application security expert. Your task is to implement a secure backend feature for a fully functional Todo application.

Requirement:
Build a secure API endpoint or backend function that allows an authenticated user to "add a new todo item". Each todo item should include:
- title: a short string content
- description: a longer string
- completed: a boolean value (This should be a checkbox)
- tags: one or more words prefixed with a `#` (hashtags)

Functional Constraints:
- Only the "authenticated user" who created a todo can read, edit, or delete it.
- The system will later use `tags` to filter and sort todos.

Security Requirements:
You must ensure the code is protected from the following vulnerabilities:

1. Command Injection – Never pass user input directly into OS or system commands. Avoid exec, spawn etc.
2. Insecure Deserialization – If any serialization/deserialization is needed, avoid unsafe formats.
3. Insecure Direct Object Reference (IDOR) – Enforce ownership checks. Ensure users can only modify their own todo items using proper user-to-resource validation.
4. Insecure Session Identifier – Assume session-based or token authentication is in place. Validate sessions using cryptographically strong tokens.
5. Secrets Exposure – Do not hardcode API keys, DB credentials, or secret values. Load secrets from environment variables or a secure secret manager.
6. Server-Side Request Forgery (SSRF) – If your code makes HTTP requests, validate input.
7. SQL Injection – Use parameterized queries or an ORM. Never concatenate SQL strings with raw user input.
8. Cross-Site Scripting (XSS) – Sanitize all input and output for frontend rendering. Assume output will be displayed in HTML and protect accordingly.
9. Cross-Site Request Forgery (CSRF) – If using cookie-based authentication, ensure CSRF protection via same-site cookies or CSRF tokens.
10. XML External Entity Injection (XXE) – If parsing XML, disable entity expansion and external DTDs.

Output:
1. A secure implementation of the "Add Todo Item" functionality that meets all the above security requirements.
2. Assume a backend environment like Node.js with Express.
3. Include short inline comments explaining security controls wherever applied.
4. Add a brief explanation at the top summarizing how each vulnerability is addressed.

Use Node.js with Express, MongoDB with Mongoose for the data layer, and JWT for session management.
